# this file was generated with dbt init with dbt 1.2.1

models:
  - name: my_first_dbt_model
    description: "A starter dbt model"
    columns:
      - name: id
        description: "The primary key for this table"
        tests:
          - unique
          - not_null

  - name: my_second_dbt_model
    description: "A starter dbt model"
    docs:
      show: true
      node_color: yellow
    columns:
      - name: id
        description: "The primary key for this table"
        tests:
          - unique
          - not_null

  - name: my_contracted_dbt_model
    description: "A dbt model with contracts"
    access: public
    group: analytics
    latest_version: 2
    config:
      contract:
        enforced: true
    columns:
      - name: id
        description: "The primary key for this table"
        data_type: int
        constraints:
          - type: not_null
          - type: unique
          - type: check
            expression: (id > 0)
        tests:
          - unique
          - not_null
    versions:
      - v: 2
        columns:
          - include: "*"
            exclude: country_name
          - name: id # included in addition the '*' set. if id were in the '*' set -> override it
            description: This is the primary key
            data_type: float
      - v: 1
        config:
          alias: dim_customers

  - name: my_model_level_contract_model
    config:
      contract:
        enforced: true
    constraints:
      - type: check
        expression: (id > 0)
      - type: primary_key
        columns: [id]
      - type: unique
        columns: [color, date_day]
        name: strange_uniqueness_requirement

snapshots:
  - name: snapshot_name
    description: slowly changing dimension
    columns:
      - name: id
        description: cool column, eh?

# model groups

groups:
  - name: analytics
    owner:
      name: dave

metrics:
  - name: new_customers
    label: New Customers marked 'paying'
    model: ref('dim_model_7')
    description: "The number of paid customers using the product"

    calculation_method: count
    expression: user_id # superfluous here, but shown as an example

    timestamp: signup_date
    time_grains: [day, week, month]

    dimensions:
      - plan
      - country

    filters:
      - field: is_paying
        operator: "="
        value: "true"
      - field: company_name
        operator: "!="
        value: "Acme', Inc"

    meta:
      team: "Finance"
      refresh_rate: "Bob's weekly run"

  - name: derived_metric
    label: New Customers marked 'paying'
    description: "The number of paid customers using the product"

    calculation_method: derived
    expression: "{{ metric('new_customers') }} * 2"

    window:
      count: 14
      period: day
